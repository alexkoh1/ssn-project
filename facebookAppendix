\subsection{Facebook code}
\begin{lstlisting}
    import time
    import pynfdump
    from selenium import webdriver
    import datetime
    from datetime import timedelta
    import operator

    """ list of facebook IP
     can be received "whois -h whois.radb.net -- '-i origin AS32934' | awk '/^route:/ {print $2;}' | sort | uniq"""
    facebookIP = ("103.4.96.0/22", "129.134.0.0/16", "157.240.0.0/16", "157.240.0.0/24",
    "157.240.10.0/24", "157.240.1.0/24", "157.240.2.0/24", "157.240.3.0/24",
    "157.240.4.0/24", "157.240.5.0/24", "157.240.6.0/24", "157.240.7.0/24",
    "157.240.8.0/24", "157.240.9.0/24", "173.252.64.0/18", "173.252.64.0/19",
    "173.252.70.0/24", "173.252.96.0/19", "179.60.192.0/22", "179.60.192.0/24",
    "179.60.193.0/24", "179.60.194.0/24", "179.60.195.0/24", "185.60.216.0/22",
    "185.60.216.0/24", "185.60.217.0/24", "185.60.218.0/24", "185.60.219.0/24",
    "204.15.20.0/22", "31.13.24.0/21", "31.13.64.0/18", "31.13.64.0/19",
    "31.13.64.0/24", "31.13.65.0/24", "31.13.66.0/24", "31.13.67.0/24", "31.13.68.0/24",
    "31.13.69.0/24", "31.13.70.0/24", "31.13.71.0/24", "31.13.72.0/24", "31.13.73.0/24",
    "31.13.74.0/24", "31.13.75.0/24", "31.13.76.0/24", "31.13.77.0/24", "31.13.78.0/24",
    "31.13.79.0/24", "31.13.80.0/24", "31.13.81.0/24", "31.13.82.0/24", "31.13.83.0/24",
    "31.13.84.0/24", "31.13.85.0/24", "31.13.86.0/24", "31.13.87.0/24", "31.13.88.0/24",
    "31.13.89.0/24", "31.13.90.0/24", "31.13.91.0/24", "31.13.92.0/24", "31.13.93.0/24",
    "31.13.94.0/24", "31.13.95.0/24", "31.13.96.0/19", "45.64.40.0/22", "66.220.144.0/20", 
    "66.220.144.0/21", "66.220.149.11/16", "66.220.152.0/21", "66.220.158.11/16",
    "66.220.159.0/24", "69.171.224.0/19", "69.171.224.0/20", "69.171.224.37/16",
    "69.171.229.11/16", "69.171.239.0/24", "69.171.240.0/20", "69.171.242.11/16",
    "69.171.253.0/24", "69.171.255.0/24", "69.63.176.0/20", "69.63.176.0/21",
    "69.63.176.0/24", "69.63.178.0/24", "69.63.184.0/21", "69.63.186.0/24", "74.119.76.0/22")
    url = "https://www.facebook.com/lonesexternals"  # page of person
    username = "email"  # class of login field on facebook
    password = "pass"  # class of password field on facebook
    login = "u_0_0"  # class of login button
    timestampClass = "_5ptz"  # class of time field
    timeName = "data-utime"  # attribute with utime
    netflowStore = "/mnt/flows"
    routerList = ['ROUTER']
    dateConverted = list()  # utime into string
    netflowDate = 1480317600  # earliest netflow time
    ipList = list()
    userList = dict()
    delay = 1  # max delay between connection ends and data posting
    precise = 0.8  # reasonable deviation


    def gettimelist(address):
        """ Parse given page in virtual browser and get list of date"""
        browser = webdriver.\
            PhantomJS(executable_path='./phantomjs-2.1.1-linux-x86_64/bin/phantomjs')
        browser.get(address)
        elem = browser.find_element_by_name(username)
        elem.send_keys("mr.external@mail.ru")
        elem = browser.find_element_by_name(password)
        elem.send_keys("248163264")
        elem = browser.find_element_by_id(login)
        elem.submit()
        time.sleep(3)
        last_height = browser.execute_script("return document.body.scrollHeight")
        # scroll page to bottom, to download all dynamical updates
        while True:
            browser.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(1)
            new_height = browser.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break
            else:
                last_height = new_height
        elem = browser.find_elements_by_class_name(timestampClass)
        datelist = list()
        for timestamp in elem:
            datelist.append(timestamp.get_attribute(timeName))
        browser.quit()
        return datelist


    dateList = gettimelist(url)
    # building search string from known facebook IP for netflow parser
    searchString = "dst net " + facebookIP[0]  # + " or src net "+ facebookIP[0]
    for i in facebookIP:
        searchString += " or dst net " + i  # + " or src net "+ i
    # convert time to string format if time greater than first time in netflow
    for i in dateList:
        if int(i) > netflowDate:
            dateConverted.append(datetime.datetime.fromtimestamp(int(i)))
        else:
            break
    netflowSet = pynfdump.Dumper(netflowStore, sources=routerList)
    # get list of list  with suitable ip for each known date
    for i in range(len(dateConverted)):
        ipList.append(list())
        netflowSet.set_where(
            start=(dateConverted[i] - timedelta(minutes=dateConverted[i].minute % 5)).strftime('%Y-%m-%d %H:%M'),
            end=(dateConverted[i] + timedelta(minutes=5 - dateConverted[i].minute % 5)).strftime('%Y-%m-%d %H:%M'))
        ipSet = netflowSet.search(searchString)
        for r in ipSet:
            # get netflow in time [utime;utime+delay]
            if (int(r['first'].strftime('%s'))) <= int(dateConverted[i].strftime('%s')) <= (
                        int(r['last'].strftime('%s')) + delay):
                ipList[i].append(r['srcip'])
    for i in range(len(ipList) - 1):
        # create dictionary with all meet IP address and his frequency
        temp = set(ipList[i])
        for k in temp:
            if k in userList:
                userList[k] += 1
            else:
                userList[k] = 1
    for i in userList:
        sorted_x = sorted(userList.items(), key=operator.itemgetter(1), reverse=True)
    for i in sorted_x:
        if i[1] > sorted_x[0][1] * precise:
            print i
        else:
            break
\end{lstlisting}
